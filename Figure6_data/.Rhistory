####Hint: Use a filter command to put in points only for cities with a population of greater than 40,000. This should leave you with 32 cities.
all_cities <- maps::world.cities
head(all_cities)
selected_cities <- all_cities %>% filter(country.etc %in% c("Costa Rica", "Panama", "Nicaragua") & pop > 40000)
####Hint: Use add_column to attach the "Measurement" variable to your data, and set that to the color aesthetic when you draw the points.
selected_cities$Measurement <- Measurement
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL),color=Measurement, size = 5)+
scale_color_distiller(palette=7)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
scale_color_distiller(palette=7)+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL),color=Measurement, size = 5)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
scale_color_distiller(palette=6)+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL),color=Measurement, size = 5)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
scale_color_distiller(palette=6)+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL),fill=Measurement, size = 5)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
scale_fill_distiller(palette=7)+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL),fill=Measurement, size = 5)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL),fill=Measurement, size = 5)+
scale_fill_distiller(palette=7)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL, color=Measurement), size = 5)+
scale_fill_distiller(palette=7)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL, color=Measurement), size = 5)+
scale_color_distiller(palette=6)
ggplot(data = central_america, mapping = aes(x= long, y= lat, group = group))+
geom_polygon(color="black",fill="white")+
geom_point(data = selected_cities,aes(x=long,y=lat,group=NULL, color=Measurement), size = 5)+
scale_color_distiller(palette=7)
install.packages("sf")
library(sf)
library(devtools)
install_github("r-spatial/sf")
library(sf)
library(rnaturalearth)
install.packages("sp")
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
####DO NOT MODIFY
s_america<-ne_countries(scale="medium",continent='south america',returnclass="sf")
ggplot(s_america)+
geom_sf(aes(fill=pop_est))+
scale_fill_distiller(palette = 10)
library(tidyverse)
library(maps)
ggplot(s_america)+
geom_sf(aes(fill=pop_est))+
scale_fill_distiller(palette = 10)
?sample
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
var(earnings)
starting <- 0
earnings <- c()
allVars <- c()
for(j in 1:1000){
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
allVars <- c(allVars, var(earnings))
}
mean(allVars)
allVars <- c()
for(j in 1:1000){
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1))
starting <- starting + result
}
allVars <- c(allVars, var(earnings))
}
mean(allVars)
allVars <- c()
for(j in 1:1000){
starting <- 0
earnings <- c()
for(i in 1:10){
earnings <- c(earnings, starting)
result <- sample(c(1, -1), prob = c(0.5, 0.5))
starting <- starting + result
}
allVars <- c(allVars, var(earnings))
}
mean(allVars)
allVars <- c()
for(j in 1:1000){
starting <- 0
earnings <- c()
for(i in 1:20){
earnings <- c(earnings, starting)
result <- sample(c(1, -1), prob = c(0.5, 0.5))
starting <- starting + result
}
allVars <- c(allVars, var(earnings))
}
mean(allVars)
m <- lm(log(price) ~ log(carat), data = diamonds)
diamonds <- modelr::add_residuals(diamonds, m)
p <- ggplot(diamonds, aes(x = clarity, y = resid, color = clarity)) +
ggforce::geom_sina(alpha = 0.1) +
stat_summary(fun.data = "mean_cl_boot", color = "black") +
facet_wrap(~cut)
library(ggplot2)
library(plotly)
m <- lm(log(price) ~ log(carat), data = diamonds)
diamonds <- modelr::add_residuals(diamonds, m)
p <- ggplot(diamonds, aes(x = clarity, y = resid, color = clarity)) +
ggforce::geom_sina(alpha = 0.1) +
stat_summary(fun.data = "mean_cl_boot", color = "black") +
facet_wrap(~cut)
toWebGL(ggplotly(p))
# 3.1
data(economics, package = "ggplot2")
p <- economics %>%
arrange(psavert) %>%
plot_ly(x = ~date, y = ~psavert)
add_paths(p)
add_lines(p)
# 3.2
library(lubridate)
econ <- economics %>%
mutate(yr = year(date), mnth = month(date))
# One trace (more performant, but less interactive)
econ %>%
group_by(yr) %>%
plot_ly(x = ~mnth, y = ~uempmed) %>%
add_lines(text = ~yr)
plot_ly(econ, x = ~mnth, y = ~uempmed) %>%
add_lines(color = ~ordered(yr))
library(dplyr)
top5 <- txhousing %>%
group_by(city) %>%
summarise(m = mean(sales, na.rm = TRUE)) %>%
arrange(desc(m)) %>%
top_n(5)
top5
tx5 <- semi_join(txhousing, top5, by = "city")
plot_ly(tx5, x = ~date, y = ~median) %>%
add_lines(linetype = ~city)
mpg %>%
group_by(model) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
mutate(model = forcats::fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = I("gray"), showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = I("blue"),
name = "mpg city"
) %>%
add_markers(
x = ~h, y = ~model,
color = I("red"),
name  = "mpg highway"
) %>%
layout(xaxis = list(title = "Miles per gallon"))
pnorm(-1.3484)
uvar <- runif(10000)
logUvar <- log(uvar)
meanLog <- mean(logUvar)
exp(meanLog)
exp(-1)
logNorms <- rlnorm(10000, meanlog = 5, sdlog = 1)
loglogs <- log(logNorms)
median(loglogs)
mean(loglogs)
exp(mean(log(logNorms)))
exp(5.5)
exp(5)
dat
data()
dat
dat <- matrix(c(80, 15, 5,60, 30, 10),2)
dat
dat <- matrix(c(80, 15, 5,60, 30, 10),3)
dat
dat <- t(matrix(c(80, 15, 5,60, 30, 10),3))
dat
chisq.test(dat)
total
counts <- c(275, 183, 133, 111, 76, 66,66,44,46)
total <- sum(counts)
total
chi_val
chi_val <- sum((counts - expected)^2/expected)
expected <-  c(301, 176, 125, 97, 79, 67, 58, 51, 46)
chi_val <- sum((counts - expected)^2/expected)
chi_val
pchisq(chi_val, 9)
mat <- matrix(c(4,1,2,6), 2)
mat
fisher.test(mat)
mat2 <- atrix(c(3,2,1,4), 2)
?fisher.test
fisher.test(mat2, alternative = "greater")
mat2 <- atrix(c(3,2,1,4), 2)
fisher.test(mat2, alternative = "greater")
mat2 <- atrix(c(3,2,1,4), 2)
mat2 <- matrix(c(3,2,1,4), 2)
fisher.test(mat2, alternative = "greater")
fisher.test(mat2)
words_exp <- 190*c(0.53, 0.35, 0.12)
words <- c(140,100, 50)
words_exp
words_chi <- sum((words - words_exp)^2/words_exp)
words_chi
words <- c(140,100, 50)
words_exp <- 290*c(0.53, 0.35, 0.12)
words_chi <- sum((words - words_exp)^2/words_exp)
words_chi
pchisq(chi_val, 2)
words_exp
pchisq(chi_val, 2, lower.tail = FALSE)
mat5 <-  matrix(c(43,8, 4,45), 2)
mat5 <-  matrix(c(43,8, 4,45), 2)
mat5_exp <- matrix(c(23.5,26.5, 23.5,26.5), 2)
mat5_chi <-  sum((mat5-mat5_exp)^2/mat5_exp)
mat5_chi
cards_chi
cards <- c(46,54,49, 51)
cards_exp <- c(50,50,50, 50)
cards_chi <- sum((cards-cards_exp)^2/cards_exp)
cards_chi
success <- 0:100
plot(success, dbinom(success, size=20, prob=.5),type='h')
plot(success, dbinom(success, size=100, prob=.5),type='h')
?abline
abline(v = 48)
abline(v = 48, color = 'red')
abline(v = 48, col= 'red')
success <- 0:100
plot(success, dbinom(success, size=100, prob=.5),type='h')
abline(v = 48, col= 'red')
?abline
plot(success, dbinom(success, size=100, prob=.5),type='h')
abline(v = 48, col= 'red')
?plot
plot(success, dbinom(success, size=100, prob=.5),type='l')
abline(v = 48, col= 'red')
?plot
plot(success, dbinom(success, size=100, prob=.5),type='b')
abline(v = 48, col= 'red')
abline(v = 75, col= 'blue')
?text
abline(v = 25, col= 'orange')
text(24, 0.02, "25 tails")
text(46, 0.02, "48 tails")
text(73, 0.02, "75 tails")
abline(v = 52, col= 'magenta')
text(54, 0.02, "52 tails")
success <- 0:100
plot(success, dbinom(success, size=100, prob=.5),type='b')
abline(v = 48, col= 'red')
abline(v = 75, col= 'blue')
abline(v = 25, col= 'orange')
abline(v = 52, col= 'magenta')
text(24, 0.02, "25 tails")
text(46, 0.02, "48 tails")
text(73, 0.02, "75 tails")
text(56, 0.02, "52 tails")
plot(success, dbinom(success, size=100, prob=.5),type='b')
abline(v = 48, col= 'red')
abline(v = 75, col= 'blue')
abline(v = 25, col= 'orange')
abline(v = 52, col= 'magenta')
text(24, 0.02, "25 tails")
text(46, 0.07, "48 tails")
text(73, 0.02, "75 tails")
text(56, 0.07, "52 tails")
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(stat = "summary", position="dodge", width = 0.8, alpha = 0.7) +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
library(ggplot2)
library(dplyr)
library(ggsci)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(stat = "summary", position="dodge", width = 0.8, alpha = 0.7) +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
setwd("c:/Dropbox/capn3b-dmd_paper/Figure6_data")
data <- read.csv("percent_MC_data.txt", sep = "\t", header = TRUE)
str(data)
data$Genotype <- factor(data$Genotype, levels = c("wildtype", "capn3b rnaless"))
data$Treatment <-factor(data$Treatment, levels = c("control","0.3uM APM", "0.5uM APM", "0.75uM APM"))
pd = position_dodge(0.8)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(stat = "summary", position="dodge", width = 0.8, alpha = 0.7) +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(stat = "summary") +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(stat = "summary", color = Genotype) +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(stat = "summary", aes(color = Genotype)) +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(aes(color = Genotype)) +
geom_point(aes(x= Treatment, y= Percent_abnormal, fill = Genotype), size=2, color = "black", shape = 21, position=position_jitterdodge(0.2)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
ggplot(data, aes(x=Treatment, y= Percent_abnormal, fill = Genotype)) +
geom_line(aes(color = Genotype)) +
stat_summary(fun.min=function(x)(mean(x)-sd(x)/sqrt(length(x))),geom="errorbar",
fun.max=function(x)(mean(x)+sd(x)/sqrt(length(x))),width = 0.5, position=pd, size = 1, alpha = 0.7) +
ylab("Abnormality percentage")+
scale_x_discrete(labels = c("control","0.3µM APM", "0.5µM APM", "0.75µM APM"))+
theme_bw() + scale_fill_aaas() +
theme(
axis.title.x = element_text(color="black", size= 18, face="bold", margin=margin(t = 20, unit = "pt")),
axis.title.y = element_text(color="black", size= 18, face="bold", margin=margin(r = 20, unit = "pt")),
axis.text.x = element_text(angle = 60, vjust=0.5, colour="grey20", size= 18, face="plain"),
axis.text.y = element_text(colour="grey20",size= 18, face="plain"),
legend.title = element_text( size = 16, face = "bold"),
legend.text = element_text( size = 16, face = "plain"),
legend.key.size = unit(0.5, "cm")
)
